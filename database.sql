-- --------------------------------------------------------
-- Host:                         dragon.kent.ac.uk
-- Server version:               5.5.47-0ubuntu0.14.04.1 - (Ubuntu)
-- Server OS:                    debian-linux-gnu
-- HeidiSQL Version:             9.3.0.4984
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8mb4 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
-- Dumping data for table c06_bluerasp.Images: ~6 rows (approximately)
/*!40000 ALTER TABLE `Images` DISABLE KEYS */;
INSERT INTO `Images` (`image`, `caption`) VALUES
	('speaker.jpg', 'Raspberry Pi plugged into a Speaker/Buzzer. '),
	('Car.jpg', 'A Basic Raspberry Pi controlled car.'),
	('Motor.jpg', 'Raspberry Pi controlling a simple motor.'),
	('Car_Controller.jpg', 'Raspberry Pi controlled car that is directed by the buttons.'),
	('mcu-6050.jpg', 'mcu-6050.jpg'),
	('Button.jpg', 'Raspberry Pi connected to a couple of buttons.');
/*!40000 ALTER TABLE `Images` ENABLE KEYS */;

-- Dumping data for table c06_bluerasp.Previous_Projects: ~10 rows (approximately)
/*!40000 ALTER TABLE `Previous_Projects` DISABLE KEYS */;
INSERT INTO `Previous_Projects` (`project_name`, `previous_project`) VALUES
	('Alarm_Clock', 'JukeBox'),
	('Car', 'Motor'),
	('Car_Alarm_Clock', 'Alarm_Clock'),
	('Car_Alarm_Clock', 'Car_Algorithm'),
	('Car_Algorithm', 'Car'),
	('Car_Controller', 'Button'),
	('Car_Controller', 'Car'),
	('JukeBox', 'Speaker'),
	('Morse_Code', 'LED'),
	('PianoIOT', 'Speaker');
/*!40000 ALTER TABLE `Previous_Projects` ENABLE KEYS */;

-- Dumping data for table c06_bluerasp.Projects: ~15 rows (approximately)
/*!40000 ALTER TABLE `Projects` DISABLE KEYS */;
INSERT INTO `Projects` (`project_name`, `parts_required`, `assembly_diagram`, `assembly_instructions`, `notes`, `description`, `download`, `download2`, `download3`) VALUES
	('Accelerometer', '<li>Accelerometer Sensor Chip (MCU-6050 and similar)</li>', 'mcu6050.png', '<li>Disconnect and power off Pi</li><li>Connect VCC on the sensor to 3.3V (Pin 1).</li><li>Connect GND to Ground (Pin 6/9/14/30/34).</li><li>Connect SCL to SCL0 (Pin 5).</li><li>Connect SDA to SDA0 (Pin 3).</li><li>Power On Pi</li>', '', 'This class can read accelerometer data from sensors like the MCU-6050. It continuously reads the acceleromter registers of the sensor in a thread, seperate from the execution of your main code. Also included is the I2C tutorial, which is the serial protocol used to communicate with the sensor.', 'accel.zip', 'accel_inc_exercises.zip', 'accel_all.zip'),
	('Alarm_Clock', '<li>1x Piezo Speaker (CEM-1203(42), PS1240 etc.)</li>', 'speaker.png', '<li>Disconnect Pi completely</li><li>Connect Positive end of the speaker to whatever GPIO pin you want to use. This class used Pin X by default.</li><li>Power On Pi</li>', '<li>Positive/Negative pin on speaker tends to be the longer one</li>', 'A simple Alarm Clock class. Allows a time to be set, which will trigger a tune at the specified time. This uses the Speaker class, which should probably be looked at first.', 'alarm.zip', '', ''),
	('Button', '<li>2x Tactile buttons</li><li>2x Male to male jumper cables</li><li>3x Male to female jumper cables</li><li>Breadboard</li><li>Raspberry Pi</li>', 'Button.png', '<li>Disconnect Pi completely</li><li>Seat the buttons into the breadboard.</li><li>Connect one side of each of the buttons to the power rail using male to male jumper cables</li><li>Connect the other side of the button1 to pin 16 on the pi and the other side of button2 to pin 1 using male to female jumper cables.</li><li>Connect the 3.3V pin on the pi to the power rail using the male to female jumper cable.</li>', '<li>This project can be done without a breadboard by connecting the jumper cables directly from the pi to the buttons.</li><li>Remember, Pi4J using something called WiringPi to manage GPIO pins. This means that the pin numbers do not actually correlate with what is written on the board. Use this website to find the pin numbers: http://pi4j.com/pins/model-b-plus.html</li>', 'In this tutorial we are going to create a simple program that can count how many times we press button1 and can reset that counter by pressing button2. ', 'button.zip', 'button_inc_exercises.zip', 'button_all.zip'),
	('Car', '<li>6x Female to female jumper cables</li><li>1x Male to female jumper cable</li><li>H-bridge L298N</li><li>Batteries (with case)</li><li>2x Motor</li><li>Raspberry Pi</li><li>(Optional) A base</li><li>(Optional) 2x Wheel (for the motors)</li><li>(Optional) Stabilising wheel(s)</li>', 'Car.png', '<li>Power off the Pi completely.</li><li>Connect pins IN1, IN2, IN3, IN4, ENA and ENB on the H-bridge to pins 14, 13, 10, 11, 12 and 6 respectively on the pi with female to female jumper cables.</li><li>Loosen the OUT 4 and OUT 3 screws (the two screws in the blue plastic on the right side of the board) and connect the motors power and ground wires their connectors respectively and secure them in place by tightening the screws.</li><li>Do the same for the second motor but with OUT 1 and OUT 2.</li><li>Loosen the 12V and GND screws (the two left most of the screws in the blue plastic at the bottom of the board) and connect the ground pin on the pi to the GND connector, with a male to female jumper cable.</li><li>Connect the power wire from the battery pack to the 12V connector and the ground wire to the GND connector and tighten both screws. A red LED on the H-bridge should now light up.</li><li>(Optional) Attach wheels to the motors and the motors to either side of the base as well as any stabilizing wheels.</li>', '<li>Remember, Pi4J using something called WiringPi to manage GPIO pins. This means that the pin numbers do not actually correlate with what is written on the board. Use <a href="http://pi4j.com/pins/model-b-plus.html">this</a> website to convert.</li>', 'This Project will allow you to control 2 motors independently and create a basic moving car', 'car.zip', 'car_inc_exercises.zip', 'car_all.zip'),
	('Car_Alarm_Clock', '<li>8x Female to female jumper cables</li><li>6x Male to female jumper cables</li><li>1x Male to male jumper cable</li><li>1x Piezo Speaker</li><li>2x RedBot Bumpers</li><li>H-bridge L298N</li><li>Batteries (with case)</li><li>2x Motors</li><li>1x Button</li><li>Breadboard</li><li>Raspberry Pi</li><li>(Optional) A base</li><li>(Optional) 2x Wheel (for the motors)</li><li>(Optional) Stabilising wheel(s)</li>', 'CarAlarmClock.png', '<li>Power off the Pi completely.</li><li>Connect pins IN1, IN2, IN3, IN4, ENA and ENB on the H-bridge to pins 14, 13, 10, 11, 12 and 6 respectively on the Pi with female to female jumper cables.</li><li>Loosen the OUT 4 and OUT 3 screws (the two screws in the blue plastic on the right side of the board) and connect the motors power and ground wires their connectors respectively and secure them in place by tightening the screws.</li><li>Do the same for the second motor but with OUT 1 and OUT 2.</li><li>Loosen the 12V and GND screws (the two left most of the screws in the blue plastic at the bottom of the board) and connect the ground pin on the Pi to the GND connector, with a male to female jumper cable.</li><li>Connect the power wire from the battery pack to the 12V connector and the ground wire to the GND connector and tighten both screws. A red LED on the H-bridge should now light up.</li><li>Connect the OUT pins on the left and right RedBot Bumpers to pins 1 and 16 respectively on the Pi.</li><li>Connect the GND pins on the RedBot Bumpers to the ground rail on the breadboard</li><li>Seat the button and speaker onto the breadboard</li><li>Connect one side of the button to 3.3v power pin and the other side to pin 15 on the Pi using male to female jumper cables.</li><li>Connect one side of the speaker to the ground rail and the other side to pin 3</li><li>Connect the ground rail to a ground pin on the Pi</li><li>(Optional) Attach wheels to the motors and the motors to either side of the base as well as any stabilizing wheels and connect the bumpers to the front.</li>', NULL, 'This project combines Car Algorithm with Alarm Clock. The car will drive around, avoiding objects and playing a song, when the alarm goes off, to stop this you have to push the button. This project contains no tutorial and is meant only as an example of what can be achieved with BlueJ and the Raspberry Pi.', 'caralarm.zip', '', ''),
	('Car_Algorithm', '<li>10x Female to female jumper cables</li><li>1x Male to female jumper cable</li><li>2x RedBot Bumpers</li><li>H-bridge L298N</li><li>Batteries (with case)</li><li>2x Motors</li><li>Raspberry Pi</li><li>(Optional) A base</li><li>(Optional) 2x Wheel (for the motors)</li><li>(Optional) Stabilising wheel(s)</li>', 'CarAlgorithm.png', '<li>Power off the Pi completely.</li><li>Connect pins IN1, IN2, IN3, IN4, ENA and ENB on the H-bridge to pins 14, 13, 10, 11, 12 and 6 respectively on the Pi with female to female jumper cables.</li><li>Loosen the OUT 4 and OUT 3 screws (the two screws in the blue plastic on the right side of the board) and connect the motors power and ground wires their connectors respectively and secure them in place by tightening the screws.</li><li>Do the same for the second motor but with OUT 1 and OUT 2.</li><li>Loosen the 12V and GND screws (the two left most of the screws in the blue plastic at the bottom of the board) and connect the ground pin on the Pi to the GND connector, with a male to female jumper cable.</li><li>Connect the power wire from the battery pack to the 12V connector and the ground wire to the GND connector and tighten both screws. A red LED on the H-bridge should now light up.</li><li>Connect the OUT pins on the left and right RedBot Bumpers to pins 1 and 16 respectively on the Pi.</li><li>Connect the GND pins on the RedBot Bumpers to ground pins on the Pi.</li><li>(Optional) Attach wheels to the motors and the motors to either side of the base as well as any stabilizing wheels and connect the bumpers to the front.</li>', '<li>Remember, Pi4J using something called WiringPi to manage GPIO pins. This means that the pin numbers do not actually correlate with what is written on the board. Use <a href="http://pi4j.com/pins/model-b-plus.html">this</a> website to convert.</li><li>An assembly guide for the Redbot Bumper can be found <a href="https://learn.sparkfun.com/tutorials/redbot-assembly-guide-rev-02/redbot-sensor---mechanical-bumpers?_ga=1.58372968.359569331.1458658716">here</a></li>', 'This project builds upon the Car project by creating an algorithm, that takes inputs from two bumpers, to navigate around. The algorithm will make the car move forwards until one of its bumpers is triggered, then it will back up the car, turn away, and then move forwards. The Bumper Class in this project is very similar to Class Button and while it isn\'t necessary, its recommended that you check out our Button project before attempting this one.', 'car_algor.zip', 'car_algor_inc_exercises.zip', 'car_algor_all.zip'),
	('Car_Controller', '<li>6x Female to female jumper cables</li><li>6x Male to female jumper cables</li><li>4x Male to male jumper cables</li><li>4x Tactile buttons</li><li>Breadboard</li><li>H-bridge L298N</li><li>Batteries (with case)</li><li>2x Motor</li><li>Raspberry Pi</li><li>(Optional) A base</li><li>(Optional) 2x Wheel (for the motors)</li><li>(Optional) Stabilising wheel(s)</li>', 'Car_Controller.png', '<li>Power off the Pi completely.</li><li>Connect pins IN1, IN2, IN3, IN4, ENA and ENB on the H-bridge to pins 14, 13, 10, 11, 12 and 6 respectively on the Pi with female to female jumper cables.</li><li>Loosen the OUT 4 and OUT 3 screws (the two screws in the blue plastic on the right side of the board) and connect the motors power and ground wires their connectors respectively and secure them in place by tightening the screws.</li><li>Do the same for the second motor but with OUT 1 and OUT 2.</li><li>Loosen the 12V and GND screws (the two left most of the screws in the blue plastic at the bottom of the board) and connect the ground pin on the Pi to the GND connector, with a male to female jumper cable.</li><li>Connect the power wire from the battery pack to the 12V connector and the ground wire to the GND connector and tighten both screws. A red LED on the H-bridge should now light up.</li><li>Seat the four buttons into the breadboard.</li><li>Connect one side of each of the buttons to the power rail.</li><li>Connect the other side of the forwards, backwards, left and right buttons to pins 16, 1, 5, 4 respectively on the Pi with male to female jumper cables.</li><li>Connect the power rail to the 3.3V pin on the Pi.</li><li>(Optional) Attach wheels to the motors and the motors to either side of the base as well as any stabilizing wheels.</li>', '<li>Remember, Pi4J using something called WiringPi to manage GPIO pins. This means that the pin numbers do not actually correlate with what is written on the board. Use <a href="http://pi4j.com/pins/model-b-plus.html">this</a> website to convert.</li>', 'This Project improves upon the first car allowing it to stop if and object is in its way', 'car_control.zip', 'car_control_inc_exercises.zip', 'car_control_all.zip'),
	('JukeBox', '<li>1x Piezo Speaker (CEM-1203(42), PS1240 etc.)</li>', 'speaker.png', '<li>Disconnect Pi completely</li><li>Connect Positive end of the speaker to whatever GPIO pin you want to use. This class used Pin X by default.</li><li>Power On Pi</li>', '<li>Remember, Pi4J using something called WiringPi to manage GPIO pins. This means that the pin numbers do not actually correlate with what is written on the board. Use <a href="http://pi4j.com/pins/model-b-plus.html">this</a> website to convert.</li>', 'This class is responsible for adding and playing Songs (Lists of Notes). It uses a custom storage object called "Song", which is just a list of strings, each one being a particular note.', 'jukebox.zip', '', ''),
	('LED', '<li>LED</li><li>2x Jumper Cables</li><li>Resistor</li><li>Raspberry Pi</li>', 'LED.png', '<li>Disconnect and power off Pi</li><li>Connect the longer LED leg to the resistor.</li><li>Connect the shorter leg to the ground pin with a jumper cable.</li><li>Connect the other end of the resistor to GPIO Pin 1 with a jumper cable.</li><li>Power On Pi</li>', '<li>Remember, Pi4J using something called WiringPi to manage GPIO pins. This means that the pin numbers do not actually correlate with what is written on the board. Use <a href="http://pi4j.com/pins/model-b-plus.html">this</a> website to convert.</li>', 'This class allows you to control LED’s (Light Emitting Diodes) that are connected to the Raspberry Pi by turning them on, off or into a pulsing state. This class is very basic but can be easily implemented and expanded upon in more complex examples.', 'led.zip', 'led_inc_exercises.zip', 'led_all.zip'),
	('Morse_Code', '<li>LED</li><li>2x Jumper Cables</li><li>Resistor</li><li>Raspberry Pi</li>', 'LED.png', '<li>Disconnect and power off Pi</li><li>Connect the longer LED leg to the resistor.</li><li>Connect the shorter leg to the ground pin with a jumper cable.</li><li>Connect the other end of the resistor to GPIO Pin 1 with a jumper cable.</li><li>Power On Pi</li>', '<li>Remember, Pi4J using something called WiringPi to manage GPIO pins. This means that the pin numbers do not actually correlate with what is written on the board. Use <a href="http://pi4j.com/pins/model-b-plus.html">this</a> website to convert.</li>', 'This class converts a string to morse code (alphanumeric + spaces only). The morse code is shown via a flashing LED. This builds from the LED example.', 'morse.zip', '', ''),
	('Motor', '<li>3x Female to female jumper cables</li><li>1x Male to female jumper cable</li><li>H-bridge L298N</li><li>Batteries (with case)</li><li>Motor</li><li>Raspberry Pi</li>', 'motor.png', '<li>Power off the Pi completely.</li><li>Connect pins IN3, IN4 and ENB on the H-bridge to pins 10, 11 and 6 respectively on the pi with female to female jumper cables.</li><li>Loosen the OUT 4 and OUT 3 screws (the two screws in the blue plastic on the right side of the board) and connect the motors power and ground wires their connectors respectively and secure them in place by tightening the screws.</li><li>Loosen the 12V and GND screws (the two left most of the screws in the blue plastic at the bottom of the board) and connect the ground pin on the pi to the GND connector, with a male to female jumper cable.</li><li>Connect the power wire from the battery pack to the 12V connector and the ground wire to the GND connector and tighten both screws. A red LED on the H-bridge should now light up.</li>', '<li>Remember, Pi4J using something called WiringPi to manage GPIO pins. This means that the pin numbers do not actually correlate with what is written on the board. Use <a href="http://pi4j.com/pins/model-b-plus.html">this</a> website to convert.</li><li>You can used other H-bridges that the one used in this tutorial, however the L298N lets us control two motors, which will be useful in further projects.</li>', 'This Project will allow you to control a motor using the raspberry pi', 'motor.zip', 'motor_inc_exercises.zip', 'motor_all.zip'),
	('PianoIOT', '<li>1x Piezo Speaker (CEM-1203(42), PS1240 etc.)</li>', 'speaker.png', '<li>Disconnect Pi completely</li><li>Connect Positive end of the speaker to whatever GPIO pin you want to use. This class used Pin X by default.</li><li>Power On Pi</li>', '', 'This project comes in two parts. The Java project that runs on the Pi, and the Piano Client that is accessed with a Web Browser. These two parts communicate using an MQTT server (Kent\'s Raptor by Default). When a note is played on the web client, the Pi detects what note is played and plays it through the Speaker.', 'piano.zip', '', ''),
	('Speaker', '<li>Speaker Part, will get model number</li><li>Raspberry Pi</li><li>2x Jumper Cables</li>', 'speaker.png', '<li>Disconnect Pi completely</li><li>Connect Positive end of the speaker to whatever GPIO pin you want to use. This class used Pin X by default.</li><li>Power On Pi</li>', '<li>Positive/Negative pin on speaker tends to be the longer one</li>', 'A class that enables you to play notes on a small Pizo Speaker', 'speaker.zip', 'speaker_inc_exercises.zip', 'speaker_all.zip'),
	('Thermometer', '<li> Temperature Sensor Chip (MCU-6050 and similar)</li>', 'mcu6050.png', '<li>Disconnect and power off Pi</li><li>Connect VCC on the sensor to 3.3V (Pin 1).</li><li>Connect GND to Ground (Pin 6/9/14/30/34).</li><li>Connect SCL to SCL0 (Pin 5).</li><li>Connect SDA to SDA0 (Pin 3).</li><li>Power On Pi</li><li>Motor drive controller</li>', '<li>Ensure connections are completely secure to get accurate read outs.</li>', 'This class can read the temperature from sensors like the MCU-6050. It continuously reads the temperature register of the sensor in a thread, seperate from the execution of your main code. It is very similar to the Accelerometer class as it uses the same type of sensor. Also included is the I2C tutorial, which is the serial protocol used to communicate with the sensor.', 'thermo.zip', 'thermo_inc_exercises.zip', 'thermo_all.zip');
/*!40000 ALTER TABLE `Projects` ENABLE KEYS */;
/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, '') */;
/*!40014 SET FOREIGN_KEY_CHECKS=IF(@OLD_FOREIGN_KEY_CHECKS IS NULL, 1, @OLD_FOREIGN_KEY_CHECKS) */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
